ZOE - a really fast, lightweight (~2KB), with zero dependancies engine for creating and using autonomys client-side reusable web templates.


You describe the template as a JS object  - so no HTML parsing overhead.
(use the online HTML to ZOEJSON tool to quickly convert between HTML syntax to ZOEJSON, if you're not comfortable with writing it straight as a JSON)

can reference pre defined elements, for more organized code.


Add events:


When rendered - only one event listener (per event) will be attached
to the root element of the dom instance, and events will be
triggered by event delegation (checking the event.target) - for performance increase.
all is done automatically by the engine.

"this" in events is the triggering element.
you can directly access any other instance element of the component from the 'ref' object (no need for slow document.querySelector).

use the special "created" event to do stuff right after the component is rendered (before attaching). This is more of a one-time callback
than an actual "event.
use "createdAsync" to run the created callback asynchronousily.



load your template.

A DOM template object is created in memory, detached from your document, ready to be rendered.


You can load it even before your document is being parsed (contrary to using the <template> HTML5 element).

Load with initial settings:
use init for different configuration.


render it:

render with a context:

render and attach to document:




call renderAsync to render asynchronousily

$ is shortcut reference for 'render'
$$ is shortcut reference for 'renderAsync'

Difference between 'created' event and 'renderAsync' is that in the first the 'this' context will be the rendered element, in the second - 
you'll have the global context. with renderAsync you can keep doing other stuff on the main document while the component is rendering,
with createdAsync - you can attach a rendered component to you main DOM, before any post-render initializations are done.

call refresh on a rendered instance to "reload" it with
a new context (only the text nodes will be updated).

one way data binding
(for performance).


Use events for that:




so, load+init are for the entire component, render is to create an instance, and refresh you can call from an instance.

Look at a full example:

More documentation coming soon......

each element has
refresh (just update the text content parts)
rerender (replace the entire dom tree of the element (itself and its children) with a new tree based on a new given data context

render can have callback 
